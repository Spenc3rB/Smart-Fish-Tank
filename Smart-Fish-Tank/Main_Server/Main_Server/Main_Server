#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <ESPmDNS.h>
#include <Stepper.h>
#include <WiFi.h>
#include <Arduino.h>

#define TdsSensorPin 35
#define VREF 3.3              // analog reference voltage(Volt) of the ADC
#define SCOUNT  30            // sum of sample point

#define IN1 19
#define IN2 18
#define IN3 5
#define IN4 17

// const char* PARAM_INPUT_1 = "ssid";
// const char* PARAM_INPUT_2 = "pass";
// const char* PARAM_INPUT_3 = "ip";
// const char* PARAM_INPUT_4 = "gateway";

// const char* ssidPath = "/ssid.txt";
// const char* passPath = "/pass.txt";
// const char* ipPath = "/ip.txt";
// const char* gatewayPath = "/gateway.txt";

// IPAddress localIP;
// IPAddress localGateway;
// IPAddress subnet(255, 255, 0, 0);

// unsigned long previousMillis = 0;
// const long interval = 10000;

// String ssid;
// String pass;
// String ip;
// String gateway;

int analogBuffer[SCOUNT];     // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;
int temperatureThreshold = 25; // user input
int frequency = 1; // user input
int ppm = 1; // user input
String color;
String recipient_email;

float averageVoltage = 0;
float tdsValue = 0;
float temperature = 0;

const int redPin = 26;
const int greenPin = 25;
const int bluePin = 27;
const int freq = 5000;
const int resolution = 8;
const int redChannel = 0;
const int greenChannel = 1;
const int blueChannel = 2;

const int stepsPerRevolution = 2048;

const int oneWireBus = 4;    // Data wire is plugged into pin 32 on the ESP32

const char *ssid = "Yummy House";
const char *password = "kachow123";

OneWire oneWire(oneWireBus);

DallasTemperature sensors(&oneWire);

AsyncWebServer server(80); // Create AsyncWebServer object on port 80

Stepper myStepper(stepsPerRevolution, IN1, IN2, IN3, IN4);

// median filtering algorithm
int getMedianNum(int bArray[], int iFilterLen){
  int bTab[iFilterLen];
  for (byte i = 0; i<iFilterLen; i++)
  bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++) {
    for (i = 0; i < iFilterLen - j - 1; i++) {
      if (bTab[i] > bTab[i + 1]) {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0){
    bTemp = bTab[(iFilterLen - 1) / 2];
  }
  else {
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}

// String readFile(fs::FS &fs, const char * path){
//   Serial.printf("Reading file: %s\r\n", path);

//   File file = fs.open(path);
//   if(!file || file.isDirectory()){
//     Serial.println("- failed to open file for reading");
//     return String();
//   }
  
//   String fileContent;
//   while(file.available()){
//     fileContent = file.readStringUntil('\n');
//     break;     
//   }
//   return fileContent;
// }

// bool initWiFi() {
//   if(ssid=="" || ip==""){
//     Serial.println("Undefined SSID or IP address.");
//     return false;
//   }

//   WiFi.mode(WIFI_STA);
//   localIP.fromString(ip.c_str());
//   localGateway.fromString(gateway.c_str());


//   if (!WiFi.config(localIP, localGateway, subnet)){
//     Serial.println("STA Failed to configure");
//     return false;
//   }
//   WiFi.begin(ssid.c_str(), pass.c_str());
//   Serial.println("Connecting to WiFi...");

//   unsigned long currentMillis = millis();
//   previousMillis = currentMillis;

//   while(WiFi.status() != WL_CONNECTED) {
//     currentMillis = millis();
//     if (currentMillis - previousMillis >= interval) {
//       Serial.println("Failed to connect.");
//       return false;
//     }
//   }

//   Serial.println(WiFi.localIP());
//   return true;
// }

void setup(){
  Serial.begin(115200);
  pinMode(TdsSensorPin, INPUT);
  // ----------------- Stepper Motor -----------------
  myStepper.setSpeed(16);
  // ----------------- RGB LED -----------------
  ledcSetup(redChannel, freq, resolution);
  ledcSetup(greenChannel, freq, resolution);
  ledcSetup(blueChannel, freq, resolution);
  ledcAttachPin(redPin, redChannel);
  ledcAttachPin(greenPin, greenChannel);
  ledcAttachPin(bluePin, blueChannel);
  // ----------------- SPIFFS -----------------
  if(!SPIFFS.begin(true)){
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }
  // ----------------- WiFi -----------------
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  if (!MDNS.begin("aquatech")) { // Start the mDNS responder for camera.local
    Serial.println("Error setting up MDNS responder!");
    while(1) {
      delay(1000);
    }
  }
  // ssid = readFile(SPIFFS, ssidPath);
  // pass = readFile(SPIFFS, passPath);
  // ip = readFile(SPIFFS, ipPath);
  // gateway = readFile(SPIFFS, gatewayPath);
  // // ----------------- IF WiFi is not configured -----------------
  // if (!initWiFi()) {
  //   Serial.println("Setting AP (Access Point)");
  //   // NULL sets an open Access Point
  //   WiFi.softAP("ESP-WIFI-MANAGER", NULL);

  //   IPAddress IP = WiFi.softAPIP();
  //   Serial.print("AP IP address: ");
  //   Serial.println(IP); 

  //   // Web Server Root URL
  //   server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
  //     request->send(SPIFFS, "/wifimanager.html", "text/html");
  //   });
  //   server.serveStatic("/", SPIFFS, "/");
  //   Serial.println("HTTP server started");
  //    server.on("/submission", HTTP_POST, [](AsyncWebServerRequest *request) {
  //     Serial.println("POST request received");
  //     int params = request->params();
  //     for(int i=0;i<params;i++){
  //       AsyncWebParameter* p = request->getParam(i);
  //       if(p->isPost()){
  //         // HTTP POST ssid value
  //         if (p->name() == PARAM_INPUT_1) {
  //           ssid = p->value().c_str();
  //           Serial.print("SSID set to: ");
  //           Serial.println(ssid);
  //           // Write file to save value
  //           File file = SPIFFS.open(ssidPath, FILE_WRITE);
  //           if(!file){
  //             Serial.println("Failed to create file");
  //             return;
  //           }
  //           if(file.print(ssid)){
  //             Serial.println("File written");
  //           } else {
  //             Serial.println("Write failed");
  //           }
  //           file.close();
  //         }
  //         // HTTP POST pass value
  //         if (p->name() == PARAM_INPUT_2) {
  //           pass = p->value().c_str();
  //           Serial.print("Password set to: ");
  //           Serial.println(pass);
  //           // Write file to save value
  //           File file = SPIFFS.open(passPath, FILE_WRITE);
  //           if(!file){
  //             Serial.println("Failed to create file");
  //             return;
  //           }
  //           if(file.print(pass)){
  //             Serial.println("File written");
  //           } else {
  //             Serial.println("Write failed");
  //           }
  //           file.close();
  //         }
  //         // HTTP POST ip value
  //         if (p->name() == PARAM_INPUT_3) {
  //           ip = p->value().c_str();
  //           Serial.print("IP Address set to: ");
  //           Serial.println(ip);
  //           // Write file to save value
  //           File file = SPIFFS.open(ipPath, FILE_WRITE);
  //           if(!file){
  //             Serial.println("Failed to create file");
  //             return;
  //           }
  //           if(file.print(ip)){
  //             Serial.println("File written");
  //           } else {
  //             Serial.println("Write failed");
  //           }
  //           file.close();
  //         }
  //         // HTTP POST gateway value
  //         if (p->name() == PARAM_INPUT_4) {
  //           gateway = p->value().c_str();
  //           Serial.print("Gateway set to: ");
  //           Serial.println(gateway);
  //           // Write file to save value
  //           File file = SPIFFS.open(gatewayPath, FILE_WRITE);
  //           if(!file){
  //             Serial.println("Failed to create file");
  //             return;
  //           }
  //           if(file.print(gateway)){
  //             Serial.println("File written");
  //           } else {
  //             Serial.println("Write failed");
  //           }
  //           file.close();
  //         }
  //         //Serial.printf("POST[%s]: %s\n", p->name().c_str(), p->value().c_str());
  //       }
  //     }
  //     request->send(200, "text/plain", "Done. ESP will restart, connect to your router and go to IP address: " + ip);
  //     ESP.restart();
  //   });
  //   server.begin();
  // } else { // ----------------- IF WiFi is configured -----------------
      // ----------------- Web Server -----------------
      server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
        request->send(SPIFFS, "/index.html", String(), false);
      });
      server.on("/tds", HTTP_GET, [](AsyncWebServerRequest *request){ // might need GET
        request->send_P(200, "text/plain", String(tdsValue).c_str());
      });
      server.on("/temperature", HTTP_GET, [](AsyncWebServerRequest *request){ // might need GET
        request->send_P(200, "text/plain", String(temperature).c_str());
      });
      // ----------------- Temperature -----------------
      server.on("/tempSET", HTTP_GET, [](AsyncWebServerRequest *request){ // might need GET
        temperatureThreshold = request->getParam("temperature")->value().toInt();
        Serial.println("Temperature Threshold: " + String(temperatureThreshold));
        AsyncWebServerResponse *response = request->beginResponse(200, "text/plain", "Temperature Threshold set to " + String(temperatureThreshold));
        response->addHeader("Access-Control-Allow-Origin", "*");
        response->addHeader("Connection", "close");
        request->send(response);
      });
      // ----------------- PPM -----------------
      server.on("/ppmSET", HTTP_GET, [](AsyncWebServerRequest *request){ // might need GET
        ppm = request->getParam("ppm")->value().toInt();
        Serial.println("PPM: " + String(ppm));
        AsyncWebServerResponse *response = request->beginResponse(200, "text/plain", "PPM set to " + String(ppm));
        response->addHeader("Access-Control-Allow-Origin", "*");
        response->addHeader("Connection", "close");
        request->send(response);
      });
      // ----------------- Frequency -----------------
      server.on("/frequencySET", HTTP_GET, [](AsyncWebServerRequest *request){ // might need GET
        frequency = request->getParam("frequency")->value().toInt();
        Serial.println("Frequency: " + String(frequency));
        AsyncWebServerResponse *response = request->beginResponse(200, "text/plain", "Frequency set to " + String(frequency));
        response->addHeader("Access-Control-Allow-Origin", "*");
        response->addHeader("Connection", "close");
        request->send(response);
      });
      // ----------------- Color -----------------
      server.on("/colorSET", HTTP_GET, [](AsyncWebServerRequest *request){ // might need GET
        color = request->getParam("color")->value();
        Serial.println("Color: " + color);
        // convert color to RGB (it is in hex format for example: #FFFFFF)
        int r = (int)strtol(color.substring(1,3).c_str(), NULL, 16);
        int g = (int)strtol(color.substring(3,5).c_str(), NULL, 16); 
        int b = (int)strtol(color.substring(5,7).c_str(), NULL, 16);
        ledcWrite(redChannel, r);
        ledcWrite(greenChannel, g);
        ledcWrite(blueChannel, b);
        AsyncWebServerResponse *response = request->beginResponse(200, "text/plain", "Color set to " + color);
        response->addHeader("Access-Control-Allow-Origin", "*");
        response->addHeader("Connection", "close");
        request->send(response);
      });
      // ----------------- Email -----------------
      server.on("/emailSET", HTTP_GET, [](AsyncWebServerRequest *request){ // might need GET
        recipient_email = request->getParam("email")->value();
        AsyncWebServerResponse *response;
        if (recipient_email == "") {
          Serial.println("Email set to: nothing");
          response = request->beginResponse(200, "text/plain", "Email set to nothing. You will not receive any notifications from embeddedaquatech.csu@gmail.com");
        }
        else {
          Serial.println("Email set to: " + recipient_email);
          response = request->beginResponse(200, "text/plain", "Email set to " + recipient_email + ". You will receive notifications from embeddedaquatech.csu@gmail.com");
        }
        response->addHeader("Access-Control-Allow-Origin", "*");
        response->addHeader("Connection", "close");
        request->send(response);
      });
      // ----------------- Static Files -----------------
      server.serveStatic("/Embedded.png", SPIFFS, "/Embedded.png");
      server.serveStatic("/http://aquatech.local/favicon.ico", SPIFFS, "/favicon.ico");
      // ----------------- Start Server -----------------
      sensors.begin();
      server.begin();
}

void loop(){
  static unsigned long analogSampleTimepoint = millis();
  if(millis()-analogSampleTimepoint > 40U){   //every 40 milliseconds,read the analog value from the ADC
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
    analogBufferIndex++;
    if(analogBufferIndex == SCOUNT){ 
      analogBufferIndex = 0;
    }
  }   
  
  static unsigned long printTimepoint = millis();
  if(millis()-printTimepoint > 800U){ // every 800 milliseconds, calculate the average value of the buffer
    printTimepoint = millis();
    for(copyIndex=0; copyIndex<SCOUNT; copyIndex++){
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
      
      // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 4096.0;
      //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0)); 
      float compensationCoefficient = 1.0+0.02*(temperature-25.0);
      //temperature compensation
      float compensationVoltage=averageVoltage/compensationCoefficient;
      
      //convert voltage value to tds value
      tdsValue=(133.42*compensationVoltage*compensationVoltage*compensationVoltage - 255.86*compensationVoltage*compensationVoltage + 857.39*compensationVoltage)*0.5;
    }
  }
  // simulate the email alert
  if (ppm + 100 < tdsValue || ppm - 100 > tdsValue) {
    if (recipient_email != "") {
      Serial.println("TDS Value Alert: " + String(tdsValue));
    }
    else {
      Serial.println("No email set");
    }
  }

  // ----- Temperature -----
  sensors.requestTemperatures();
  temperature = sensors.getTempCByIndex(0);
  delay(5000);
  // simulate the email alert
  if (temperatureThreshold + 10 < temperature || temperatureThreshold - 10 > temperature) {
    if (recipient_email != "") {
      Serial.println("Temperature Alert: " + String(temperature));
    }
    else {
      Serial.println("No email set");
    }
  }
  if (tdsValue < 1000 || temperatureThreshold + 10 < temperature || temperatureThreshold - 10 > temperature) {
      myStepper.step(stepsPerRevolution);
      // delay by the frequency set by the user (which is in times per day)
      vTaskDelay(86400000 / frequency);
    }
    else {
      myStepper.step(0);
    }
}